// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should render the content section 1`] = `
<Fragment>
  <div
    className="makeStyles-body-1"
  >
    <SummaryBox />
    <WithStyles(ForwardRef(Grid))
      className="makeStyles-summaryBox-2"
      container={true}
    >
      <WithStyles(ForwardRef(Grid))
        className="makeStyles-summaryHeader-3"
        container={true}
        style={
          Object {
            "margin": "1rem 0 0 0",
          }
        }
      >
        <WithStyles(ForwardRef(Grid))
          item={true}
          md={6}
          style={
            Object {
              "display": "flex",
              "justifyContent": "flex-start",
            }
          }
        >
          <WithStyles(ForwardRef(Typography))
            variant="h5"
          >
             Status 
          </WithStyles(ForwardRef(Typography))>
        </WithStyles(ForwardRef(Grid))>
        <WithStyles(ForwardRef(Grid))
          item={true}
          md={6}
          style={
            Object {
              "display": "flex",
              "justifyContent": "flex-end",
            }
          }
        />
      </WithStyles(ForwardRef(Grid))>
      <WithStyles(ForwardRef(Grid))
        className="makeStyles-tabs-22"
      >
        <WithStyles(ForwardRef(Button))
          className="makeStyles-tab-23"
          disableElevation={true}
          key="0"
          onClick={[Function]}
          uvariant="contained"
        >
          Pré-sessão
        </WithStyles(ForwardRef(Button))>
        <WithStyles(ForwardRef(Button))
          className="makeStyles-tab-23"
          disableElevation={true}
          key="1"
          onClick={[Function]}
          uvariant="contained"
        >
          Sessão Iniciada
        </WithStyles(ForwardRef(Button))>
        <WithStyles(ForwardRef(Button))
          className="makeStyles-tab-23"
          disableElevation={true}
          key="2"
          onClick={[Function]}
          uvariant="contained"
        >
          Votação Iniciada
        </WithStyles(ForwardRef(Button))>
        <WithStyles(ForwardRef(Button))
          className="makeStyles-tab-23"
          disableElevation={true}
          key="3"
          onClick={[Function]}
          uvariant="contained"
        >
          Votação Encerrada
        </WithStyles(ForwardRef(Button))>
        <WithStyles(ForwardRef(Button))
          className="makeStyles-tab-23"
          disableElevation={true}
          key="4"
          onClick={[Function]}
          uvariant="contained"
        >
          Próxima Pauta
        </WithStyles(ForwardRef(Button))>
        <WithStyles(ForwardRef(Button))
          className="makeStyles-tab-23"
          disableElevation={true}
          key="5"
          onClick={[Function]}
          uvariant="contained"
        >
          Sessão Encerrada
        </WithStyles(ForwardRef(Button))>
        <WithStyles(ForwardRef(Button))
          className="makeStyles-tab-23"
          disableElevation={true}
          key="6"
          onClick={[Function]}
          uvariant="contained"
        >
          Fim da transmissão
        </WithStyles(ForwardRef(Button))>
      </WithStyles(ForwardRef(Grid))>
    </WithStyles(ForwardRef(Grid))>
    <WithStyles(ForwardRef(Grid))
      className="makeStyles-summaryBox-2"
      container={true}
    >
      <WithStyles(ForwardRef(Grid))
        className="makeStyles-summaryHeader-3"
        container={true}
      >
        <WithStyles(ForwardRef(Grid))
          item={true}
          md={6}
          style={
            Object {
              "display": "flex",
              "justifyContent": "flex-start",
            }
          }
        >
          <WithStyles(ForwardRef(Typography))
            variant="h5"
          >
             Nova atualização 
          </WithStyles(ForwardRef(Typography))>
        </WithStyles(ForwardRef(Grid))>
        <WithStyles(ForwardRef(Grid))
          item={true}
          md={6}
          style={
            Object {
              "display": "flex",
              "justifyContent": "flex-end",
            }
          }
        />
      </WithStyles(ForwardRef(Grid))>
      <WithStyles(ForwardRef(Grid))
        item={true}
        md={12}
      >
        <WithStyles(ForwardRef(Grid))
          container={true}
        >
          <form
            autoComplete="off"
            className="makeStyles-textArea-5"
            noValidate={true}
          >
            <WithStyles(ForwardRef(TextField))
              InputProps={
                Object {
                  "classes": Object {
                    "notchedOutline": "makeStyles-notchedOutline-4",
                  },
                }
              }
              bgcolor="white"
              className="makeStyles-textField-6"
              id="textfield"
              multiline={true}
              name="updateText"
              onChange={[Function]}
              rows={4}
              value=""
              variant="outlined"
            />
          </form>
        </WithStyles(ForwardRef(Grid))>
        <Styled(MuiBox)
          bgcolor="#F2F2F2"
          borderRadius="0 0 10px 25px"
          borderTop={1}
          color="#F2F2F2"
        >
          <WithStyles(ForwardRef(Grid))
            container={true}
          >
            <WithStyles(ForwardRef(Grid))
              className="makeStyles-submenu-11"
              item={true}
              xs={8}
            >
              <div
                className="makeStyles-subMenuItem-12"
              >
                <WithStyles(ForwardRef(Typography))
                  className="makeStyles-time-18"
                  variant="h6"
                >
                   18:00 
                </WithStyles(ForwardRef(Typography))>
              </div>
              <div
                className="makeStyles-subMenuItem-12"
              >
                <img
                  alt="divider icon"
                  src="../../img/divider.svg"
                />
              </div>
              <div
                className="makeStyles-subMenuItem-12"
              >
                <a
                  href="/"
                >
                  <img
                    alt="upload icon"
                    onClick={[Function]}
                    src="../../img/picture_upload.svg"
                  />
                </a>
              </div>
              <div
                className="makeStyles-subMenuItem-12"
              >
                <img
                  alt="incorporate tweet icon"
                  onClick={[Function]}
                  src="../../img/twitter_icon.svg"
                />
              </div>
            </WithStyles(ForwardRef(Grid))>
            <WithStyles(ForwardRef(Grid))
              item={true}
              style={
                Object {
                  "display": "flex",
                  "justifyContent": "flex-end",
                }
              }
              xs={4}
            >
              <WithStyles(ForwardRef(Button))
                className="makeStyles-button-9"
                disableElevation={true}
                onClick={[Function]}
                variant="contained"
              >
                Inserir
              </WithStyles(ForwardRef(Button))>
            </WithStyles(ForwardRef(Grid))>
          </WithStyles(ForwardRef(Grid))>
        </Styled(MuiBox)>
      </WithStyles(ForwardRef(Grid))>
    </WithStyles(ForwardRef(Grid))>
    <WithStyles(ForwardRef(Dialog))
      onClose={[Function]}
      open={false}
    >
      <WithStyles(ForwardRef(DialogContent))>
        <WithStyles(ForwardRef(DialogContentText))>
          Insira no campo abaixo o link para o tweet desejado
        </WithStyles(ForwardRef(DialogContentText))>
        <WithStyles(ForwardRef(TextField))
          autoFocus={true}
          fullWidth={true}
          id="name"
          label="Link para o tweet"
          margin="dense"
          name="tweetURL"
          onChange={[Function]}
          type="text"
        />
      </WithStyles(ForwardRef(DialogContent))>
      <WithStyles(ForwardRef(DialogActions))>
        <WithStyles(ForwardRef(Button))
          color="primary"
          onClick={[Function]}
        >
          Cancelar
        </WithStyles(ForwardRef(Button))>
        <WithStyles(ForwardRef(Button))
          color="primary"
          onClick={[Function]}
        >
          Incorporar tweet
        </WithStyles(ForwardRef(Button))>
      </WithStyles(ForwardRef(DialogActions))>
    </WithStyles(ForwardRef(Dialog))>
    <WithStyles(ForwardRef(Dialog))
      PaperProps={
        Object {
          "style": Object {
            "backgroundColor": "#F2F2F2",
          },
        }
      }
      fullWidth={true}
      maxWidth="sm"
      onClose={[Function]}
      open={false}
    >
      <div
        style={
          Object {
            "display": "flex",
            "justifyContent": "space-between",
          }
        }
      >
        <WithStyles(ForwardRef(DialogTitle))
          id="form-dialog-title"
        >
          Nova atualizacao com imagem
        </WithStyles(ForwardRef(DialogTitle))>
        <img
          alt="exit"
          onClick={[Function]}
          src="../../img/exit_icon.svg"
          style={
            Object {
              "margin": "0 1rem 0 0",
            }
          }
        />
      </div>
      <WithStyles(ForwardRef(Paper))
        elevation={0}
        style={
          Object {
            "backgroundColor": "white",
            "borderRadius": "15px",
            "padding": "1rem",
          }
        }
      >
        <WithStyles(ForwardRef(DialogContent))>
          <WithStyles(ForwardRef(Grid))
            className="makeStyles-sessionTitleAlert-24"
            container={true}
            style={
              Object {
                "display": "none",
              }
            }
          >
            <WithStyles(ForwardRef(Grid))
              item={true}
              md={1}
              style={
                Object {
                  "padding": "0.1rem 0 0 0.5rem",
                }
              }
            >
              <img
                alt="alert"
                src="../../img/alert.svg"
              />
            </WithStyles(ForwardRef(Grid))>
            <WithStyles(ForwardRef(Grid))
              item={true}
              md={10}
            />
            <WithStyles(ForwardRef(Grid))
              item={true}
              md={1}
              style={
                Object {
                  "padding": "0.1rem 0.1rem 0rem 1rem",
                }
              }
            >
              <img
                alt="exit"
                onClick={[Function]}
                src="../../img/alert_within_dialog_exit_icon.svg"
              />
            </WithStyles(ForwardRef(Grid))>
          </WithStyles(ForwardRef(Grid))>
          <WithStyles(ForwardRef(TextField))
            InputProps={
              Object {
                "disableUnderline": true,
              }
            }
            bgcolor="white"
            elevation={0}
            fullWidth={true}
            id="textfield"
            multiline={true}
            name="previewModalUpdateText"
            onChange={[Function]}
            placeholder="Inserir nota"
            rows={4}
          />
          <ReactImageUploadComponent
            accept="image/*"
            alt="Image upload form"
            buttonClassName=""
            buttonStyles={
              Object {
                "backgroundColor": "#00AF82",
                "borderRadius": "5px",
                "fontWeight": "600",
              }
            }
            buttonText="Escolher imagens"
            buttonType="button"
            className=""
            defaultImages={Array []}
            errorClass=""
            errorStyle={Object {}}
            fileContainerStyle={Object {}}
            fileSizeError=" file size is too big"
            fileTypeError=" is not a supported file extension"
            imgExtension={
              Array [
                ".jpg",
                ".png",
                ".jpeg",
              ]
            }
            label="Tamanho máximo: 5mbs"
            labelClass=""
            labelStyles={Object {}}
            maxFileSize={5242880}
            name=""
            onChange={[Function]}
            singleImage={true}
            style={
              Object {
                "backgroundColor": "#F4F4F4",
              }
            }
            withIcon={true}
            withLabel={true}
            withPreview={true}
          />
        </WithStyles(ForwardRef(DialogContent))>
      </WithStyles(ForwardRef(Paper))>
      <WithStyles(ForwardRef(DialogActions))
        className="makeStyles-previewModalFooter-20"
      >
        <WithStyles(ForwardRef(Typography))
          className="makeStyles-time-18"
          style={
            Object {
              "alignSelf": "flex-start",
            }
          }
          variant="h6"
        >
           18:00 
        </WithStyles(ForwardRef(Typography))>
        <WithStyles(ForwardRef(Button))
          className="makeStyles-previewModalSubmitButton-19"
          onClick={[Function]}
          variant="contained"
        >
          Publicar
        </WithStyles(ForwardRef(Button))>
      </WithStyles(ForwardRef(DialogActions))>
    </WithStyles(ForwardRef(Dialog))>
    <WithStyles(ForwardRef(Dialog))
      PaperProps={
        Object {
          "style": Object {
            "backgroundColor": "#F2F2F2",
          },
        }
      }
      fullWidth={true}
      maxWidth="sm"
      onClose={[Function]}
      open={false}
    >
      <div
        style={
          Object {
            "display": "flex",
            "justifyContent": "space-between",
          }
        }
      >
        <WithStyles(ForwardRef(DialogTitle))
          id="form-dialog-title"
        >
          Nova atualizacao do Twitter
        </WithStyles(ForwardRef(DialogTitle))>
        <img
          alt="exit"
          onClick={[Function]}
          src="../../img/exit_icon.svg"
          style={
            Object {
              "margin": "0 1rem 0 0",
            }
          }
        />
      </div>
      <WithStyles(ForwardRef(Paper))
        elevation={0}
        style={
          Object {
            "backgroundColor": "white",
            "borderRadius": "15px",
            "padding": "1rem",
          }
        }
      >
        <WithStyles(ForwardRef(DialogContent))>
          <WithStyles(ForwardRef(TextField))
            InputProps={
              Object {
                "disableUnderline": true,
              }
            }
            bgcolor="white"
            elevation={0}
            id="textfield"
            multiline={true}
            name="previewModalUpdateText"
            onChange={[Function]}
            placeholder="Inserir nota"
            rows={4}
            style={
              Object {
                "width": "100%",
              }
            }
          />
          <TwitterTweetEmbed
            style={
              Object {
                "alignSelf": "center",
              }
            }
            tweetId=""
          />
        </WithStyles(ForwardRef(DialogContent))>
      </WithStyles(ForwardRef(Paper))>
      <WithStyles(ForwardRef(DialogActions))
        className="makeStyles-previewModalFooter-20"
      >
        <WithStyles(ForwardRef(Typography))
          className="makeStyles-time-18"
          style={
            Object {
              "alignSelf": "flex-start",
            }
          }
          variant="h6"
        >
           18:00 
        </WithStyles(ForwardRef(Typography))>
        <WithStyles(ForwardRef(Button))
          className="makeStyles-previewModalSubmitButton-19"
          onClick={[Function]}
          variant="contained"
        >
          Publicar
        </WithStyles(ForwardRef(Button))>
      </WithStyles(ForwardRef(DialogActions))>
    </WithStyles(ForwardRef(Dialog))>
    <WithStyles(ForwardRef(Grid))
      className="makeStyles-updatesArea-13"
      container={true}
    >
      <WithStyles(ForwardRef(List))
        style={
          Object {
            "width": "100%",
          }
        }
      />
    </WithStyles(ForwardRef(Grid))>
  </div>
</Fragment>
`;
